##网页设计基础知识

#HTTP协议
HTTP是一个简单的请求-响应协议，它通常运行在TCP之上。它指定了客户端可能发送给服务器什么样的消息以及得到什么样的响应，请求和响应消息的头以ASCLL码形式给出；而消息内容则具有一个类似MIME的格式。
--TCP/IP协议

HTTP协议是构建在TCP/IP协议之上的，是TCP/IP协议的一个子集，所以有必要先了解TCP/IP协议相关的知识。

-TCP/IP协议族分层

TCP/IP协议族是由一个四层协议组成的系统，这四层自上至下为：应用层、传输层、网络层和数据链路层。
分层的好处是把哥哥相对独立的功能解耦，层与层之间通过规定好的接口来通信，同时以后需要修改或者重写某一个层的实现，只要接口不变也不会影响到其他层的功能。

-应用层

一般是我们编写的应用程序，其决定了向用户提供的应用服务。应用层可以通过系统调用与传输层进行通信。处于应用层的协议非常多，比如FTP(File Transfer Protocol,文件传输协议）、DNS（Domain Name System，域名系统）和此处的HTTP（HyperText Transfer Protocol,超文本传输协议）等。

-传输层
 
传输层通过系统调用向应用层提供处于网络连接中的两台计算机之间的数据传输功能。在传输层有两个性质不同的协议：TCP（Transmission Control Protocol,传输控制协议）和UDP（User Data Protocol,用户数据报协议）

-网络层

网络层用来处理在网络上流动的数据包，数据包是网络传输的最小数据单位。该层规定了通过怎样的路径（传输路线）到达对方计算机，并把数据包传输给对方。

-链路层

链路层用来处理连接网络的硬件部分，包括控制操作系统、硬件设备驱动、NIC（Network interface Card,网络适配器）以及光纤等物理可见部分。硬件上的范围均在链路层的作用范围之内。

-数据包封装

上层协议数据通过封装（encapsulate）来实现的。应用程序数据在发送到物理网络之前，会沿着协议栈从上往下传递。每层协议都将在上层协议数据基础上加上自己的头部信息（链路层还会加上尾部信息），以为实现该层功能提供必要的信息。
  应用层数据+(TCP/UDP头部）——>传输层
  传输层数据+（IP头部）——>网络层
  网络层+（以太网头部）——>链路层

发送端发送数据时，数据会从上层传输到下层，且每经过一层都会打上该层的头部信息。而对于接收端在接收数据时，数据会从下层传输到上层，传输前会把下层的头部信息删除，层层剥离。

--TCP三次握手
传输层协议主要有两个：TCP协议和UDP协议。TCP协议相对于UDP协议的特点是：TCP协议提供面向连接、字节流和可靠传输。
使用TCP协议进行通信的双方必须先建立连接，然后才能开始传输数据。TCP连接是全双工的，也就是说双方的数据读写都可以通过一个连接进行。为了确保连接双方的可靠性，在双方建立连接时，TCP协议采用了三次握手（Three-way handshake）策略。
所谓三次握手即建立TCP连接，就是指建立一个TCP连接时，需要客户端和服务端总共发送三个包以确定连接的建立。过程如下：

第一次握手：Client将标志位SYN置为1，随机产生一个seq=J，并将该数据包发送给Server，Client进入SYN_SENT状态，等待Server确认。
第二次握手：Server收到数据包后由标志位SYN=1知道Client请求建立连接，Server将标志位SYN和ACK都置为1，ack=J+1，随机产生一个值seq=K，并将该数据包发送给Client以确认连接请求，Server进入SYN_RCVD状态。
第三次握手：Client收到确认后，检查ack是否J+1，ACK是否为1，如果正确则将标志位置为1，ack=K+1，并将该数据包发送给Server，Server检查K+1，ACK是否为1，如果正确则连接建立成功，Client和Server进入ESTABLISHED状态，完成三次握手，随后Client和Server之间可以开始传输数据。

TCP报文格式

序号：Seq序号，占32位，用来标识从TCP源向目的端发送的字节流，发起方发送数据时对此进行标记。
确认序号：Ack序号，占32位，只有ACK标志位为1时，确认序号字段才有效，Ack=Seq+1
标志位：共6个，即URG、ACK、PSH、RST、SYN、FIN等，具体含义如下：
（A）URG：紧急指针（urgent pointer）有效。
（B）ACK：确认序号有效。
（C）PSH：接收方应该尽快将这个报文交给应用层。
（D）RST：重置连接。
（E）SYN：发起一个新连接。
（F）FIN：释放一个连接。

--四次握手
所谓四次挥手（Four-Way Wavehand）即终止TCP连接，就是指断开一个TCP连接时，需要客户端和服务端总共发送4个包以确认连接的断开。
 由于TCP连接时全双工的，因此，每个方向都必须要单独进行关闭，这一原则是当一方完成数据发送任务后，发送一个FIN来终止这一方向的连接，收到一个FIN只是意味着这一方向上没有数据流动了，即不会再收到数据了，但是在这个TCP连接上仍然能够发送数据，直到这一方向也发送了FIN。首先进行关闭的一方将执行主动关闭，而另一方则执行被动关闭，上图描述的即是如此。
        （1）第一次挥手：Client发送一个FIN，用来关闭Client到Server的数据传送，Client进入FIN_WAIT_1状态。
        （2）第二次挥手：Server收到FIN后，发送一个ACK给Client，确认序号为收到序号+1（与SYN相同，一个FIN占用一个序号），Server进入CLOSE_WAIT状态。
        （3）第三次挥手：Server发送一个FIN，用来关闭Server到Client的数据传送，Server进入LAST_ACK状态。
        （4）第四次挥手：Client收到FIN后，Client进入TIME_WAIT状态，接着发送一个ACK给Server，确认序号为收到序号+1，Server进入CLOSED状态，完成四次挥手。


